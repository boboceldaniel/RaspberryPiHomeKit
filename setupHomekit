# Script file used to easily setup the homebridge server and have it run every time the Pi boots
# Created by Daniel Bobocel

# STEP4: Update the Pi's default system packages
sudo apt-get update
sudo apt-get upgrade

# STEP5: Install Node JS runtime
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install -y nodejs

# STEP6: Install Avahi and dependencies
sudo apt-get install libavahi-compat-libdnssd-dev

# STEP7: Install Homebridge and dependencies
sudo npm install -g --unsafe-perm homebridge hap-nodejs node-gyp
cd /usr/local/lib/node_modules/homebridge/
sudo npm install --unsafe-perm bignum
cd /usr/local/lib/node_modules/hap-nodejs/node_modules/mdns
sudo node-gyp BUILDTYPE=Release rebuild

# STEP8: Install Homebridge through NPM
sudo npm install -g homebridge

# STEP9: Install homebridge-pi accessory
sudo npm install -g homebridge-pi

# From here, configuring the Homebridge to run every time the Pi starts.
# In order to use the systemd service as is and run Homebridge on boot up, the following folders and user have to exist.

# STEP10: Create a homebridge file under /etc/default 
# sudo nano /etc/default/homebridge

# STEP11: Create a homebridge.service file under /etc/systemd/system
# sudo nano /etc/systemd/system/homebridge.service

# STEP12: Create the homebridge user
sudo useradd --system homebridge

# STEP13: Create the directory /var/homebridge, writtable by the user above
# sudo mkdir /var/homebridge
# sudo chown -R homebridge:homebridge /var/homebridge
# sudo chmod 777 -R /var/homebridge

# STEP14: Create a config.json file in the above directory
# sudo nano /var/homebridge/config.json

# STEP15: Enable and run the service manually
# systemctl daemon-reload
# systemctl enable homebridge
# systemctl start homebridge

# STEP16: Check the status of the service
# systemctl status homebridge



